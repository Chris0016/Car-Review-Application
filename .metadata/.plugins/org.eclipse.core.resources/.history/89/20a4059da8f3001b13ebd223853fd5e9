package application;

import javafx.event.ActionEvent;
import javafx.scene.Node;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.Alert;
import javafx.scene.control.Alert.AlertType;
import javafx.scene.control.TextField;
import javafx.stage.Stage;
import javafx.fxml.FXMLLoader;
import javafx.fxml.Initializable;
import javafx.fxml.FXML;

import java.util.Map.Entry;
import java.util.ResourceBundle;
import java.net.URL;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Hashtable;
import java.util.regex.*;
import DBConnection.DBHandler;

public class SignUpController implements Initializable{
	private Parent root;
	private Stage stage;
	private Scene scene;

	@FXML
	 private TextField nameTextField;

	@FXML
	private TextField lastNameTextField;

	@FXML
	private TextField password1TextField;

	@FXML 
	private TextField password2TextField;

	@FXML
	private TextField ageTextField;

	@FXML
	private TextField favCarTextField;
	
	@FXML
	private TextField usernameTextField;
	
	private Connection connection;
	private DBHandler handler;
	private PreparedStatement pst;
	private Statement stmt;
	private String sql;
	private ResultSet rs;

	private AlertConfigs alertConfigs;

	//private String name;
	
	
	private Hashtable<String, String> form;
	private int ageNum;
	private String holder;
	private boolean boolHolder;


	@Override
	public void initialize(URL arg0, ResourceBundle arg1) {
		handler = new DBHandler();
		alertConfigs = new AlertConfigs();
		form = new Hashtable<String, String>(6);

	}
	
	private void loadVariables() {

		form.put("name", nameTextField.getText());
		form.put("last name", lastNameTextField.getText());
		form.put("age", ageTextField.getText());
		form.put("favorite car", favCarTextField.getText() );
		form.put("username", usernameTextField.getText());
		form.put("password1", password1TextField.getText());
		form.put("password2", password2TextField.getText());
	}

	

	public void returnToLogin(ActionEvent event){
		try{
			root = FXMLLoader.load(getClass().getResource("LogIn.fxml"));
	 		stage = (Stage)((Node)event.getSource()).getScene().getWindow();
			scene = new Scene(root);
			stage.setScene(scene);
			stage.show();
		} catch(Exception e){
			e.printStackTrace();
		}
	}

	public void signUp(){
		
		loadVariables();
		printValues();
		if (isEmpty()){
			alertConfigs.incompleteForm.showAndWait();
			return;
		}
		
		
		if (validCredentials()) {
			saveData();
			//goToHome();
		}
		
	

	}
	
	private boolean saveData() {
		//Save Data
		System.out.println("Connecting to database...");
		try {
		sql = "INSERT INTO information(name, lastname, age, favoritecar, username, password)"
						+ "values(?, ?, ? , ?, ?, ?)";
		connection = handler.getConnection();
		System.out.println("Connected to database");

		
			pst = connection.prepareStatement(sql);
		
			pst.setString(1, form.get("name"));
			pst.setString(2, form.get("last name"));
			pst.setString(3, form.get("age"));
			pst.setString(4, form.get("favorite car"));
			pst.setString(5, form.get("username"));
			pst.setString(6, form.get("password1"));
			
			pst.executeUpdate();

			connection.close();
			pst.close();
			System.out.println("Closing database");

			System.out.println("Success Creating User");					
		}catch(Exception e) {
			System.out.println(e);

			//TODO: Throw an alert indicating that there was an error connecting to the database. 


			return false;
		}
			return true;
				
	}
	
	private void createUser(){
		System.out.println("Has a valid age and password matches.");

	}

	private boolean validCredentials(){
		return (hasValidAge() && hasValidPassword() && hasValidUsername());
	}
	
	private boolean hasValidUsername() {
		//Connect to data base and check if user name is not already taken 
		
		System.out.println("Checking Username");
		
		boolHolder = true;
		try{
			connection = handler.getConnection();
			System.out.println("Connecting to database...");
			
			stmt = connection.createStatement();
			sql = "SELECT  user name " +
             "FROM information";

			rs  = stmt.executeQuery(sql);
			holder = form.get("username");

			//Check for a matching user name
			while(rs.next()){
				if (holder.equals(rs.getString("username"))){
					boolHolder = false;
					System.out.println("Username already in use");
					break;
				} 
			}

			rs.close();
   			stmt.close();
			connection.close();
			System.out.println("Connection Closed...");

			return boolHolder;

		}catch(Exception e){
			e.printStackTrace();
			//Throw Connection Alert Here:
			/*
				if(e == SQLEXCEPTION){

				}
			*/
			System.out.println("Error in validating user name");
			System.exit(1);
			
			return true;
		}
}

	
	private boolean hasValidPassword() {
		return (passwordMatches() && strongPassword());
	}
	private boolean passwordMatches(){
		System.out.println("Checking passwords...");
		if (!form.get("password1").equals(form.get("password2"))){
			alertConfigs.passwordMismatch.showAndWait();
			System.out.println("Passwords Do Not Match");
			return false;
		}
		return true;
	}


	private boolean strongPassword()
    {
    	holder = form.get("password1");

        String regex = "^(?=.*[0-9])"
                       + "(?=.*[a-z])(?=.*[A-Z])"
                       + "(?=.*[!@#$%^&+=])"
                       + "(?=\\S+$).{8,20}$";
  
        
        Pattern p = Pattern.compile(regex);

        if (holder == null) {
        	alertConfigs.weakPassword.showAndWait();
            return false;
        }
  
        Matcher m = p.matcher(holder);
  
        if(!m.matches()){
        	alertConfigs.weakPassword.showAndWait();
        	return false;
        }
        return true;
    }
	
	private boolean hasValidAge(){
		System.out.println("Checking age...");
		try {
			ageNum = Integer.parseInt(form.get("age"));
			if(ageNum < 0 ) {
				alertConfigs.notANumber.showAndWait();
				return false;
			}
			else if(ageNum < 18 || ageNum > 110){
				alertConfigs.underAge.showAndWait();
				System.out.println("Age is not valid");
				return false;
			}
		}
		catch(Exception e){
			alertConfigs.notANumber.showAndWait();
			System.out.println("Age input is not a number");
			return false;
		
		}
		return true;
	}


	private void printValues(){
		System.out.println(form);
	}

	private boolean isEmpty() {
		try{
			for(Entry<String, String> e :  form.entrySet())
				if (e.getValue().equals("")) return true;
		}catch(Exception e){
			System.out.println(e);
		}
		return false;
	}
	

}
